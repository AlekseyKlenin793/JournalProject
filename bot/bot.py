import re
import os
import telebot
import logging
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_NAME = os.getenv("DB_NAME")

# –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø–∏—Å–∫–∞ –∂—É—Ä–Ω–∞–ª–æ–≤
user_journal_data = {}

DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
engine = create_engine(DATABASE_URL)
bot = telebot.TeleBot(BOT_TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—É—á–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞—Ö –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.\n\n"
        "üìå *–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
        " - ISSN (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1234-5678)\n"
        " - –ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.3.3 –∏–ª–∏ 12.00.01)\n"
        " - –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–µ)"
    )
    bot.reply_to(message, welcome_text, parse_mode="Markdown")


@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å*\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—É—á–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞—Ö –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö. "
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "  - `/start` ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "  - `/help` ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
        "üìö *–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n"
        "  - `ISSN` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1234-5678`) ‚Äî –ù–∞–π—Ç–∏ –∂—É—Ä–Ω–∞–ª –ø–æ ISSN.\n"
        "  - –ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `5.3.3` –∏–ª–∏ `12.00.01`) ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–¥—É.\n"
        "  - –ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞`) ‚Äî –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∂—É—Ä–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞—É—á–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "üéØ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "  - `/show_top N` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N –∂—É—Ä–Ω–∞–ª–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/show_top 5`).\n\n"
        "üõ†Ô∏è *–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n"
        "  1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ `5.3.3` ‚Äî —è –ø–æ–∫–∞–∂—É –∂—É—Ä–Ω–∞–ª—ã –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.\n"
        "  2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, `–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.\n"
        "  3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/show_top 10`, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø-10 –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    bot.reply_to(message, help_text, parse_mode="Markdown")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.message_handler(func=lambda message: True)
def handle_query(message):
    query = message.text.strip()
    user_id = message.from_user.id
    logging.info(f"PID {os.getpid()} ‚Äî –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")

    if query.startswith("/show_top"):
        try:
            n = int(query.split()[1])
            show_top_journals(message, user_id, n)
        except (IndexError, ValueError):
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /show_top 5")
        return

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    issn_pattern = r"^\d{4}-\d{3}[0-9X]$"  # ISSN ?
    direction_code_pattern = r"^\d+\.\d+\.\d+$"  # –∫–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ?

    if re.match(issn_pattern, query):
        search_by_issn(message, query)  # –ø–æ–∏—Å–∫ –ø–æ ISSN
    elif re.match(direction_code_pattern, query):
        search_by_direction_code(message, query)  # –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    else:
        search_by_name(message, query)  # –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∂—É—Ä–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è


# –ø–æ–∏—Å–∫ –ø–æ ISSN
def search_by_issn(message, query):
    try:
        with engine.connect() as connection:
            sql_query = text("""
                SELECT journal_name, issn, direction_number, scientific_directions, inclusion_date,
                       h_index, citation_index, publication_time, publication_price, white_list_level,
                       url, final_category
                FROM directions
                WHERE issn = :query
            """)
            result = connection.execute(sql_query, {"query": query})
            rows = result.fetchall()
            if rows:
                send_journal_info(message, rows)
            else:
                bot.reply_to(message, "‚ùå –ñ—É—Ä–Ω–∞–ª —Å —Ç–∞–∫–∏–º ISSN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except SQLAlchemyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ ISSN: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")


# –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def search_by_direction_code(message, query):
    try:
        with engine.connect() as connection:
            sql_query = text("""
                SELECT journal_name, issn, publication_price, final_category
                FROM directions
                WHERE direction_number = :query
            """)
            result = connection.execute(sql_query, {"query": query})
            rows = result.fetchall()
            if rows:
                send_journals_list(message, rows)
            else:
                bot.reply_to(message, "‚ùå –ñ—É—Ä–Ω–∞–ª—ã —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except SQLAlchemyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")


# –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∂—É—Ä–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
def search_by_name(message, query):
    """
    –ü–æ–∏—Å–∫ –∂—É—Ä–Ω–∞–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º.
    """
    try:
        with engine.connect() as connection:
            journal_query = text("""
                SELECT journal_name, issn, direction_number, scientific_directions, inclusion_date,
                       h_index, citation_index, publication_time, publication_price, white_list_level,
                       url, final_category
                FROM directions
                WHERE journal_name ILIKE :query
            """)
            result_journal = connection.execute(journal_query, {"query": query})
            journal_rows = result_journal.fetchall()

            if journal_rows:
                send_journal_info(message, journal_rows)
                return

            direction_query = text("""
                SELECT journal_name, issn, publication_price, final_category
                FROM directions
                WHERE scientific_directions ILIKE :query
            """)
            result_direction = connection.execute(direction_query, {"query": f"%{query}%"})
            direction_rows = result_direction.fetchall()

            if direction_rows:
                send_journals_list(message, direction_rows)
            else:
                bot.reply_to(message, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
    except SQLAlchemyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∂—É—Ä–Ω–∞–ª–µ
def send_journal_info(message, rows):
    journal_info = {}
    for row in rows:
        journal_name = row[0]
        if journal_name not in journal_info:
            journal_info[journal_name] = {
                "issn": row[1],
                "directions": [],
                "inclusion_date": row[4],
                "h_index": row[5] or 0,
                "citation_index": row[6] or 0,
                "publication_time": row[7] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "publication_price": row[8] or 0,
                "white_list_level": row[9] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "url": row[10],
                "final_category": row[11] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            }
        direction = f"‚Ä¢ {row[2] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ‚Äî {row[3] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
        journal_info[journal_name]["directions"].append(direction)

    for journal_name, info in journal_info.items():
        directions_formatted = "\n".join(info["directions"])
        response = (
            f"üìö *–ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞:* {journal_name}\n"
            f"üî¢ *ISSN:* {info['issn']}\n"
            f"üìñ *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n{directions_formatted}\n"
            f"üìÖ *–î–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è:* {info['inclusion_date']}\n"
            f"üìà *–ò–Ω–¥–µ–∫—Å –•–∏—Ä—à–∞:* {info['h_index']}\n"
            f"üîó *–ò–Ω–¥–µ–∫—Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:* {info['citation_index']}\n"
            f"‚è≥ *–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {info['publication_time']}\n"
            f"üí∞ *–¶–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {info['publication_price']}\n"
            f"üèÖ *–£—Ä–æ–≤–µ–Ω—å –≤ ¬´–ë–µ–ª–æ–º —Å–ø–∏—Å–∫–µ¬ª:* {info['white_list_level']}\n"
            f"üîñ *–ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {info['final_category']}\n"
            f"üåê *–°—Å—ã–ª–∫–∞:* {info['url']}"
        )
        bot.reply_to(message, response, parse_mode="Markdown")


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞—Ö
def send_journals_list(message, rows):
    user_id = message.from_user.id

    # —Å–ø–∏—Å–æ–∫ –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_journal_data[user_id] = rows

    response = "üìö *–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤:*\n\n"
    for i, row in enumerate(rows, 1):
        journal_name = escape_markdown(row[0]) or "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        issn = escape_markdown(row[1]) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        price = f"{row[2]}" if row[2] else "0"
        category = escape_markdown(row[3]) if row[3] else "-"

        response += (
            f"{i}. üì∞ *{journal_name}*\n"
            f"   üî¢ *ISSN:* {issn}\n"
            f"   üí∞ *–¶–µ–Ω–∞:* {price}\n"
            f"   üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n\n"
        )

        # –ø—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –±–ª–∏–∑–∫–∞ –∫ –ª–∏–º–∏—Ç—É —Ç–µ–ª–µ–≥–∏
        if len(response) > 3500:  # –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            response += "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∂—É—Ä–Ω–∞–ª—ã.\n"
            break

    # –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /show_top
    response += (
        "\nüí° –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂—É—Ä–Ω–∞–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ `/show_top N`, "
        "–≥–¥–µ N ‚Äî —á–∏—Å–ª–æ –∂—É—Ä–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å."
    )

    # —Ä–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    send_long_message(message, response)


# —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
def escape_markdown(text):
    if not text:
        return ""
    # Telegram Markdown v2 —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f"([{escape_chars}])", r'\\\1', text)


# —Ä–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –≤ 4096 –±–∞–π—Ç.
def send_long_message(message, text, parse_mode="Markdown"):
    max_length = 4096
    while len(text) > max_length:
        split_index = text[:max_length].rfind("\n")
        if split_index == -1:
            split_index = max_length
        part = text[:split_index]
        text = text[split_index:].strip()

        bot.reply_to(message, part, parse_mode=parse_mode)
    if text:
        bot.reply_to(message, text, parse_mode=parse_mode)


def show_top_journals(message, user_id, n):
    if user_id not in user_journal_data:
        bot.reply_to(message, "‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –∂—É—Ä–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    journals = user_journal_data[user_id]
    if n > len(journals):
        bot.reply_to(message, f"‚ö†Ô∏è –í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –≤—Å–µ–≥–æ {len(journals)} –∂—É—Ä–Ω–∞–ª–æ–≤.")
        n = len(journals)

    response = f"üìö *–¢–æ–ø {n} –∂—É—Ä–Ω–∞–ª–æ–≤:*\n\n"
    for i, row in enumerate(journals[:n], 1):
        journal_name = escape_markdown(row[0]) or "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        issn = escape_markdown(row[1]) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        price = f"{row[2]}" if row[2] else "0"
        category = escape_markdown(row[3]) if row[3] else "-"

        response += (
            f"{i}. üì∞ *{journal_name}*\n"
            f"   üî¢ *ISSN:* {issn}\n"
            f"   üí∞ *–¶–µ–Ω–∞:* {price}\n"
            f"   üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n\n"
        )

        # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –±–ª–∏–∑–æ–∫ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
        if len(response) > 3500:  # —Å –∑–∞–ø–∞—Å–æ–º –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è Telegram Markdown
            send_long_message(message, response)
            response = ""  # –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if response:
        send_long_message(message, response)


if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()